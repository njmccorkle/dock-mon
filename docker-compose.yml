version: "3"

volumes:
  prometheus_data: {}
  grafana_data: {}

networks:
  monitor_network:

services:
  prometheus:
    image: prom/prometheus
    depends_on:
      - cadvisor
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus/:/etc/prometheus
    networks:
      - monitor_network
    ports:
      - 9090:9090
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    deploy:
      replicas: 1
      # resources:
        # limits:
          # cpus: "0.1"
          # memory: 50M
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role==manager
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M

  alertmanager:
    image: prom/alertmanager
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    networks:
      - monitor_network
    ports:
      - 9093:9093
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role==manager
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M

  cadvisor:
    image: google/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - monitor_network
    ports:
      - 8181:8080
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # node-exporter:
    # image: prom/node-exporter
    # volumes:
      # - /proc:/host/proc:ro
      # - /sys:/host/sys:ro
      # - /:/rootfs:ro
      # # - /etc/hostname:/etc/host_hostname
    # networks:
      # - monitor_network
    # ports:
      # - 9100:9100
    # command:
      # - '--path.procfs=/host/proc'
      # - '--path.sysfs=/host/sys'
      # - --collector.filesystem.ignored-mount-points
      # - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    # deploy:
      # # replicas: 1
      # mode: global
      # restart_policy:
        # condition: on-failure

  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    networks:
      - monitor_network
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    deploy:
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
